from datetime import datetime,UTC
from typing import Optional
from fastapi import FastAPI, Path
from pydantic import BaseModel, Field
from starlette.status import HTTP_201_CREATED, HTTP_204_NO_CONTENT

app = FastAPI()


class User:
    id: int
    title: str
    description: str
    is_admin: bool
    deleted_at: Optional[datetime] = None

    def __init__(self, id, title, description, is_admin, deleted_at):
        self.id = id
        self.title = title
        self.description = description
        self.is_admin = is_admin
        self.deleted_at = deleted_at


class UserDTO(BaseModel):
    id: Optional[int] = None
    title: str = Field(min_length=3, max_length=100)
    description: Optional[str] = Field(min_length=3, max_length=100)
    is_admin: Optional[bool] = False
    deleted_at: Optional[datetime] = None

    model_config = {
        "json_schema_extra": {
            "example": {
                "id": 1,
                "title": "A title for user",
                "description": "Short description of user",
                "is_admin": False
            }
        }
    }


USERS = [
    User(0, "ADMIN", "AUTOGENERATED ADMINISTRATOR", True, None),
]


@app.get("/users")
async def get_users():
    return USERS


@app.get("/users/{id}")
async def get_users(user_id: int):
    for user in USERS:
        if user.id == user_id:
            return user
    return None


@app.post("/users", status_code=HTTP_201_CREATED)
async def post_user(user: UserDTO):
    new_user = User(**user.model_dump())
    USERS.append(set_user_id(new_user))


@app.put("/users", status_code=HTTP_204_NO_CONTENT)
async def update_user(user: UserDTO):
    for i in range(len(USERS)):
        if USERS[i].id == user.id:
            USERS[i] = User(**user.model_dump())


@app.delete("/users/{user_id}",status_code=HTTP_204_NO_CONTENT)
async def update_user(user_id: int = Path(gt=0)):
    for i in range(len(USERS)):
        if USERS[i].id == user_id:
            USERS[i].deleted_at = datetime.now(UTC)


def set_user_id(user):
    if len(USERS) > 0:
        user.id = USERS[-1].id + 1
    else:
        user.id = 1
    return user
